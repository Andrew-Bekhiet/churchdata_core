// Mocks generated by Mockito 5.4.4 from annotations
// in churchdata_core/test/src/services/share_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:cross_file/cross_file.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:share_plus_platform_interface/platform_interface/share_plus_platform.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeShareResult_0 extends _i1.SmartFake implements _i2.ShareResult {
  _FakeShareResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SharePlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharePlatform_ extends _i1.Mock implements _i2.SharePlatform {
  @override
  _i3.Future<_i2.ShareResult> shareUri(
    Uri? uri, {
    _i4.Rect? sharePositionOrigin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #shareUri,
          [uri],
          {#sharePositionOrigin: sharePositionOrigin},
        ),
        returnValue: _i3.Future<_i2.ShareResult>.value(_FakeShareResult_0(
          this,
          Invocation.method(
            #shareUri,
            [uri],
            {#sharePositionOrigin: sharePositionOrigin},
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.ShareResult>.value(_FakeShareResult_0(
          this,
          Invocation.method(
            #shareUri,
            [uri],
            {#sharePositionOrigin: sharePositionOrigin},
          ),
        )),
      ) as _i3.Future<_i2.ShareResult>);

  @override
  _i3.Future<_i2.ShareResult> share(
    String? text, {
    String? subject,
    _i4.Rect? sharePositionOrigin,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #share,
          [text],
          {
            #subject: subject,
            #sharePositionOrigin: sharePositionOrigin,
          },
        ),
        returnValue: _i3.Future<_i2.ShareResult>.value(_FakeShareResult_0(
          this,
          Invocation.method(
            #share,
            [text],
            {
              #subject: subject,
              #sharePositionOrigin: sharePositionOrigin,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.ShareResult>.value(_FakeShareResult_0(
          this,
          Invocation.method(
            #share,
            [text],
            {
              #subject: subject,
              #sharePositionOrigin: sharePositionOrigin,
            },
          ),
        )),
      ) as _i3.Future<_i2.ShareResult>);

  @override
  _i3.Future<_i2.ShareResult> shareXFiles(
    List<_i5.XFile>? files, {
    String? subject,
    String? text,
    _i4.Rect? sharePositionOrigin,
    List<String>? fileNameOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #shareXFiles,
          [files],
          {
            #subject: subject,
            #text: text,
            #sharePositionOrigin: sharePositionOrigin,
            #fileNameOverrides: fileNameOverrides,
          },
        ),
        returnValue: _i3.Future<_i2.ShareResult>.value(_FakeShareResult_0(
          this,
          Invocation.method(
            #shareXFiles,
            [files],
            {
              #subject: subject,
              #text: text,
              #sharePositionOrigin: sharePositionOrigin,
              #fileNameOverrides: fileNameOverrides,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.ShareResult>.value(_FakeShareResult_0(
          this,
          Invocation.method(
            #shareXFiles,
            [files],
            {
              #subject: subject,
              #text: text,
              #sharePositionOrigin: sharePositionOrigin,
              #fileNameOverrides: fileNameOverrides,
            },
          ),
        )),
      ) as _i3.Future<_i2.ShareResult>);
}
