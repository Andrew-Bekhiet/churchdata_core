// Mocks generated by Mockito 5.0.17 from annotations
// in churchdata_core/test/services/share_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:share_plus_platform_interface/share_plus_platform_interface.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [SharePlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharePlatform extends _i1.Mock implements _i2.SharePlatform {
  MockSharePlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> share(String? text,
          {String? subject, _i4.Rect? sharePositionOrigin}) =>
      (super.noSuchMethod(
          Invocation.method(#share, [text],
              {#subject: subject, #sharePositionOrigin: sharePositionOrigin}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> shareFiles(List<String>? paths,
          {List<String>? mimeTypes,
          String? subject,
          String? text,
          _i4.Rect? sharePositionOrigin}) =>
      (super.noSuchMethod(
          Invocation.method(#shareFiles, [
            paths
          ], {
            #mimeTypes: mimeTypes,
            #subject: subject,
            #text: text,
            #sharePositionOrigin: sharePositionOrigin
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
